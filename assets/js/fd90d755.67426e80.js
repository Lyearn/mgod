"use strict";(self.webpackChunkmgod=self.webpackChunkmgod||[]).push([[370],{943:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>d,contentTitle:()=>a,default:()=>g,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var n=t(5893),i=t(1151);const s={title:"About"},a=void 0,r={id:"about",title:"About",description:"What is mgod?",source:"@site/../docs/about.md",sourceDirName:".",slug:"/about",permalink:"/mgod/docs/about",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"About"},sidebar:"docsSidebar",next:{title:"Installation",permalink:"/mgod/docs/installation"}},d={},c=[{value:"What is mgod?",id:"what-is-mgod",level:2},{value:"Why use mgod?",id:"why-use-mgod",level:2}];function l(e){const o={a:"a",code:"code",h2:"h2",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h2,{id:"what-is-mgod",children:"What is mgod?"}),"\n",(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.code,{children:"mgod"})," is a MongoDB ODM specifically designed for Go. It provides a structured way to map Go models to MongoDB collections, simplifying database interactions in Go applications."]}),"\n",(0,n.jsx)(o.h2,{id:"why-use-mgod",children:"Why use mgod?"}),"\n",(0,n.jsxs)(o.p,{children:["Creating ",(0,n.jsx)(o.code,{children:"mgod"})," was driven by the need to ",(0,n.jsx)(o.strong,{children:"simplify MongoDB interactions"})," while keeping ",(0,n.jsx)(o.strong,{children:"one schema for all"})," in Go. Traditionally, working with MongoDB in Go involved either using separate structs for database and service logic or manually converting service structs to MongoDB documents, a process that was both time-consuming and error-prone. This lack of integration often led to redundant coding, especially when dealing with union types or adding meta fields for each MongoDB operation."]}),"\n",(0,n.jsxs)(o.p,{children:["Inspired by the easy interface of MongoDB handling using ",(0,n.jsx)(o.a,{href:"https://github.com/Automattic/mongoose",children:"Mongoose"})," and ",(0,n.jsx)(o.a,{href:"https://github.com/typegoose/typegoose",children:"Typegoose"})," libraries available in Node, ",(0,n.jsx)(o.code,{children:"mgod"})," aims to streamline these processes. It offers a more integrated approach, reducing the need to duplicate code and enhancing type safety, making MongoDB operations more intuitive and efficient in Go."]})]})}function g(e={}){const{wrapper:o}={...(0,i.a)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1151:(e,o,t)=>{t.d(o,{Z:()=>r,a:()=>a});var n=t(7294);const i={},s=n.createContext(i);function a(e){const o=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:o},e.children)}}}]);