"use strict";(self.webpackChunkmgod=self.webpackChunkmgod||[]).push([[665],{4789:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>r});var o=t(5893),a=t(1151);const s={title:"Multi Tenancy"},i=void 0,l={id:"multi_tenancy",title:"Multi Tenancy",description:"mgod comes with the built-in support for multi-tenancy, enabling the use of a single Go struct with multiple databases. This feature allows creation of multiple EntityMongoModel of the same Go struct to be attached to different databases while using the same underlying MongoDB client connection.",source:"@site/../docs/multi_tenancy.md",sourceDirName:".",slug:"/multi_tenancy",permalink:"/mgod/docs/multi_tenancy",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Multi Tenancy"},sidebar:"docsSidebar",previous:{title:"Meta Fields",permalink:"/mgod/docs/meta_fields"},next:{title:"Union Types",permalink:"/mgod/docs/union_types"}},c={},r=[{value:"Usage",id:"usage",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"mgod"})," comes with the built-in support for multi-tenancy, enabling the use of a single Go struct with multiple databases. This feature allows creation of multiple ",(0,o.jsx)(n.code,{children:"EntityMongoModel"})," of the same Go struct to be attached to different databases while using the same underlying MongoDB client connection."]}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(n.p,{children:["Create separate ",(0,o.jsx)(n.code,{children:"EntityMongoModel"})," for different tenants using same Go struct and corresponding databases."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'type User struct {\n\tName    string\n\tEmailID string `bson:"emailId"`\n\tAmount  float32\n}\ncollection := "users"\n\ntenant1DB := "tenant1"\ntenant2DB := "tenant2"\n\ntenant1Model, _ := mgod.NewEntityMongoModelOptions(tenant1DB, collection, nil)\ntenant2Model, _ := mgod.NewEntityMongoModelOptions(tenant2DB, collection, nil)\n'})}),"\n",(0,o.jsx)(n.p,{children:"These models can now be used simultaneously inside the same service logic as well as in a transaction operation."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'amount := 10000\n\ntenant1Model.UpdateMany(context.TODO(), bson.M{"name": "Gopher Tenant 1"}, bson.M{"$inc": {"amount": -amount}})\ntenant2Model.UpdateMany(context.TODO(), bson.M{"name": "Gopher Tenant 2"}, bson.M{"$inc": {"amount": amount}})\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"EntityMongoModel"})," is always bound to the specified database at the time of its declaration and, as such, cannot be used to perform operations across multiple databases."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'result, _ := tenant1Model.FindOne(context.TODO(), bson.M{"name": "Gopher Tenant 2"})\n// result will be <nil> value in this case\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>i});var o=t(7294);const a={},s=o.createContext(a);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);